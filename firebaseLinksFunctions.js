// firebaseLinksFunctions.js - OPTIMALIZOVAN√Å VERZE

const firebaseConfig = {
    apiKey: "AIzaSyBdsU71bo-BBUNinMctWM73jX8fX7mXz60",
    authDomain: "star-trek-odkazy.firebaseapp.com",
    projectId: "star-trek-odkazy",
    storageBucket: "star-trek-odkazy.firebasestorage.app",
    messagingSenderId: "1009898907428",
    appId: "1:1009898907428:web:07297e8b8d76ff2654b5b1"
};

let app = null;
let db = null;
let lastSyncTime = 0;
const CACHE_DURATION = 5000; // 5 sekund cache

window.initializeFirebaseLinksApp = async function() {
    console.log("üöÄ Inicializace Firebase aplikace...");
    try {
        if (typeof firebase === 'undefined' || !firebase.initializeApp) {
            console.error("‚ùå Firebase SDK nen√≠ naƒçteno!");
            return false;
        }

        if (!app) {
            app = firebase.initializeApp(firebaseConfig, "linksApp");
            console.log("‚úÖ Firebase aplikace inicializov√°na");
        }

        if (!db) {
            if (typeof firebase.firestore === 'undefined') {
                console.error("‚ùå Firestore SDK nen√≠ naƒçteno!");
                return false;
            }
            db = firebase.firestore(app);
            console.log("‚úÖ Firestore datab√°ze p≈ôipravena");

            // OPTIMALIZACE: Offline persistence pouze na desktopu
            const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
            if (!isMobile) {
                try {
                    await db.enablePersistence();
                    console.log("‚úÖ Offline persistence povolena");
                } catch (err) {
                    console.warn("‚ö†Ô∏è Offline persistence nelze aktivovat:", err.code);
                }
            } else {
                console.log("üì± Mobile detekov√°n - offline persistence p≈ôeskoƒçena");
            }
        }

        return true;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi inicializaci Firebase:", error);
        return false;
    }
};

// OPTIMALIZACE: Cache pro links
let linksCache = null;

window.addLinkToFirestore = async function(linkName, linkUrl, orderIndex) {
    if (!db) {
        console.error("‚ùå Firestore datab√°ze nen√≠ inicializov√°na");
        return false;
    }
    try {
        await db.collection('links').add({
            name: linkName,
            url: linkUrl,
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            orderIndex: orderIndex
        });
        console.log(`‚úÖ Odkaz "${linkName}" p≈ôid√°n`);
        linksCache = null; // INVALIDUJEME CACHE
        return true;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ odkazu:", error);
        return false;
    }
};

// OPTIMALIZACE: Caching + redukce orderBy dotaz≈Ø
window.getLinksFromFirestore = async function() {
    if (!db) {
        console.error("‚ùå Firestore datab√°ze nen√≠ inicializov√°na");
        return [];
    }

    // CACHE CHECK - pokud m√°me ƒçerstv√° data, vra≈•me je ihned
    const now = Date.now();
    if (linksCache && (now - lastSyncTime) < CACHE_DURATION) {
        console.log("‚ö° Vrac√≠m cached data (bez API vol√°n√≠)");
        return linksCache;
    }

    try {
        // OPTIMALIZACE: Jen jeden orderBy m√≠sto dvou
        const snapshot = await db.collection('links')
            .orderBy('orderIndex', 'asc')
            .get();
        
        linksCache = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
        
        lastSyncTime = now;
        console.log(`‚úÖ Naƒçteno ${linksCache.length} odkaz≈Ø z Firestore`);
        return linksCache;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ odkaz≈Ø:", error);
        return linksCache || []; // Vra≈• cache pokud existuje, jinak pr√°zdn√Ω array
    }
};

window.deleteLinkFromFirestore = async function(linkId) {
    if (!db) {
        console.error("‚ùå Firestore datab√°ze nen√≠ inicializov√°na");
        return false;
    }
    try {
        await db.collection('links').doc(linkId).delete();
        console.log(`‚úÖ Odkaz smaz√°n: ${linkId}`);
        linksCache = null; // INVALIDUJEME CACHE
        return true;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi maz√°n√≠ odkazu:", error);
        return false;
    }
};

window.updateLinkInFirestore = async function(linkId, newName, newUrl) {
    if (!db) {
        console.error("‚ùå Firestore datab√°ze nen√≠ inicializov√°na");
        return false;
    }
    try {
        await db.collection('links').doc(linkId).update({
            name: newName,
            url: newUrl,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        console.log(`‚úÖ Odkaz aktualizov√°n: ${linkId}`);
        linksCache = null; // INVALIDUJEME CACHE
        return true;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi aktualizaci odkazu:", error);
        return false;
    }
};

window.updateLinkOrderInFirestore = async function(link1Id, link1OrderIndex, link2Id, link2OrderIndex) {
    if (!db) {
        console.error("‚ùå Firestore datab√°ze nen√≠ inicializov√°na");
        return false;
    }
    
    const batch = db.batch();
    const link1Ref = db.collection('links').doc(link1Id);
    const link2Ref = db.collection('links').doc(link2Id);

    batch.update(link1Ref, { orderIndex: link2OrderIndex });
    batch.update(link2Ref, { orderIndex: link1OrderIndex });

    try {
        await batch.commit();
        console.log(`‚úÖ Po≈ôad√≠ odkaz≈Ø prohozeno`);
        linksCache = null; // INVALIDUJEME CACHE
        return true;
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi prohazov√°n√≠ po≈ôad√≠:", error);
        return false;
    }
};